#!/usr/bin/env runhaskell
{-# LANGUAGE OverloadedStrings #-}

module Main where

import Text.Pandoc (def, pandocExtensions, queryWith, readerExtensions, readHtml, Inline(Link), runPure, Pandoc)
import Text.Pandoc.Walk (walk)
import qualified Data.Text as T  (append, drop, head, init, intercalate, last, length, pack, replace, take, unlines, unpack, Text)
import Data.List ((\\), intercalate, sort, nub)
import Data.List.Utils (replace)
import Data.Maybe (fromJust)
import qualified Data.Map.Strict as M (filter, keys, lookup)
import System.Directory (doesFileExist, renameFile)
import Data.Containers.ListUtils (nubOrd)
import System.IO.Temp (emptySystemTempFile)
import Text.Read (readMaybe)
import qualified Control.Monad.Parallel as Par (mapM, mapM_)
import Control.Parallel.Strategies (parMap, rseq)
import Text.Show.Pretty (ppShow)
import Data.FileStore.Utils (runShellCommand)
import qualified Data.ByteString.Lazy.UTF8 as U (toString)
import System.Exit (ExitCode(ExitFailure))
import Data.Binary (decodeFile, encodeFile)

import LinkMetadata (readLinkMetadata, authorsTruncate, Metadata, MetadataItem)

import Columns (simplifiedDoc)

import Interwiki (convertInterwikiLinks, inlinesToString)

import qualified Data.Vector as V (toList, Vector)
import Control.Monad.Identity (runIdentity, Identity)
import Data.RPTree -- (knn, forest, metricL2, rpTreeCfg, fpMaxTreeDepth, fpDataChunkSize, fpProjNzDensity, fromListDv, DVector, Embed(..), RPForest)
import Data.Conduit (ConduitT)
import Data.Conduit.List (sourceList)

main :: IO ()
main = do md  <- readLinkMetadata
          edb <- readEmbeddings
          let hyperparams = hyperparameterSweep edb
          print $ take 20 hyperparams
          print hyperparams

          -- -- update for any missing embeddings, and return updated DB for computing distances & writing out fragments:
          -- let todo = sort $ missingEmbeddings md edb
          -- edb'' <- do if (length todo) == 0 then putStrLn "(Read databases; all updated.)" >> return edb else do
          --              newEmbeddings <- Par.mapM embed todo
          --              let edb' = nubOrd (edb ++ newEmbeddings)
          --              writeEmbeddings edb'
          --              return edb'

          -- let ddb = embeddings2Forest edb''
          -- let pairs  = parMap rseq (findN ddb bestNEmbeddings) edb''
          -- writeOutMatches md pairs
          return ()

-- how many results do we want?
bestNEmbeddings :: Int
bestNEmbeddings = 10

embeddingsPath :: String
embeddingsPath = "metadata/embeddings.bin"

type Embedding  = (String, String, [Double]) -- NOTE: 'Float' in Haskell is 32-bit single-precision float (FP32); OA API apparently returns 64-bit double-precision (FP64), so we use 'Double' instead
type Embeddings = [Embedding]

readEmbeddings :: IO Embeddings
readEmbeddings = do exists <- doesFileExist embeddingsPath
                    if exists then decodeFile embeddingsPath else return []

writeEmbeddings :: Embeddings -> IO ()
writeEmbeddings es = do tempf <- emptySystemTempFile "hakyll-embeddings"
                        encodeFile tempf es
                        renameFile tempf embeddingsPath

missingEmbeddings :: Metadata -> Embeddings -> [(String, MetadataItem)]
missingEmbeddings md edb = let urlsToCheck = M.keys $ M.filter (\(t, aut, _, _, tags, abst) -> length (t++aut++show tags++abst) > minimumLength) md
                               urlsEmbedded = map (\(u,_,_) -> u) edb :: [String]
                               missing      = urlsToCheck \\ urlsEmbedded
                               in map (\u -> (u, fromJust $ M.lookup u md)) missing

  where minimumLength :: Int
        minimumLength = 400 -- how many characters long should metadata be before it is worth trying to embed?

-- convert an annotated item into a single text string: concatenate the useful metadata
formatDoc :: (String,MetadataItem) -> T.Text
formatDoc (path,mi@(t,aut,dt,_,tags,abst)) =
    let document = T.pack $ replace "\n" "\n\n" $ unlines ["'"++t++"' " ++ "("++path++")" ++ ", by "++authorsTruncate aut++" ("++dt++").", "Keywords: "++(intercalate ", " tags) ++ ".", "Abstract: "++abst]
        parsedEither = let parsed = runPure $ readHtml def{readerExtensions = pandocExtensions } document
                       in case parsed of
                          Left e -> error $ "Failed to parse HTML document into Pandoc AST: error: " ++ show e ++ " : " ++ show mi ++ " : " ++ T.unpack document
                          Right p -> p
        -- create a numbered list of URL references inside each document to expose it to the embedding model, as 'simplifiedDoc' necessarily strips URLs:
        documentURLs = extractURLs parsedEither
        documentURLsText = if null documentURLs then "" else "References:\n" `T.append` T.unlines (map (\(n, (url,titles)) -> T.pack n `T.append` ". " `T.append` url `T.append` " " `T.append` (T.intercalate ", " $ tail titles)) $ zip (map show [(1::Int)..]) documentURLs)
        -- simple plaintext ASCII-ish version, which hopefully is more comprehensible to NN models than full-blown HTML
        plainText = simplifiedDoc parsedEither `T.append` documentURLsText
        -- post-processing: 'We suggest replacing newlines (\n) in your input with a single space, as we have observed inferior results when newlines are present.' https://beta.openai.com/docs/api-reference/embeddings/create
        -- GPT-3 apparently doesn't do well with Unicode punctuation either (they get a bad BPE expansion factor too), so smart quotes are right out.
        gptPlainText = T.take maxLength $ T.replace "  " " " $ T.replace "  " " " $ T.replace "\n" "" $ T.replace "…" "..." $ T.replace "“" "'" $ T.replace "”" "'" $ T.replace "‘" "''" $ T.replace "’" "'" $ T.replace "\\" "" $ T.replace "\"" "'" $ T.replace "\"" "'" plainText
    in
      gptPlainText
  where
    maxLength :: Int
    maxLength = 8100 -- how long is too long? OA guesstimates 1 BPE = 4 characters on average (https://beta.openai.com/tokenizer), so 2047 BPEs ~ 8192 characters. If a call fails, the shell script will truncate the input and retry until it works so we don't need to set the upper limit too low.

    -- | Read 1 Pandoc AST and return its URLs/anchor-text pairs;
    -- if a URL has both a title and an anchor text, we return 2 pairs because both might be valid (eg '[GPT-3](https://arxiv.org/foo "Language Models are Few-Shot Learners")' - we would like to do link-suggestions on both the short noun 'GPT-3' and the paper title, but we can't if we arbitrarily return one but not the other).
    extractURLs :: Pandoc -> [(T.Text,[T.Text])]
    extractURLs = queryWith extractURL . walk convertInterwikiLinks
     where
       extractURL :: Inline -> [(T.Text,[T.Text])]
       extractURL (Link _ il (u,""))     = [(u, [cleanURL $ inlinesToString il])]
       extractURL (Link _ il (u,target)) = [(u, [cleanURL $ inlinesToString il]), (u, [target])]
       extractURL _ = []

       -- NOTE: apparently due to nested Spans (from the smallcaps) and the RawInline issue (yet again), some link suggestions look like ">ADHD<". Very undesirable replacement targets. So we special-case clean those:
       cleanURL :: T.Text -> T.Text
       cleanURL "" = ""
       cleanURL u = if T.head u == '>' && T.last u == '<' then T.init $ T.drop 1 u else u

embed :: (String,MetadataItem) -> IO Embedding
embed i@(p,_) = do
  let doc = formatDoc i
  (modelType,embedding) <- oaAPIEmbed doc
  return (p,modelType,embedding)

-- we shell out to a Bash script `similar.sh` to do the actual curl + JSON processing; see it for details.
oaAPIEmbed :: T.Text -> IO (String,[Double])
oaAPIEmbed doc = do (status,_,mb) <- runShellCommand "./" Nothing "bash" ["static/build/embed.sh", T.unpack doc]
                    case status of
                      ExitFailure err -> error $ "Exit Failure: " ++ (intercalate " : " [show (T.length doc), T.unpack doc, ppShow status, ppShow err, ppShow mb])
                      _ -> do let results = lines $ U.toString mb
                              case results of
                                [] -> error $ "Failed to read embed.sh output? " ++ "\n" ++ show (T.length doc) ++ "\n" ++ T.unpack doc ++ "\n" ++ U.toString mb
                                (modelType:latents) -> let embeddingM = readMaybe (unlines latents) :: Maybe [Double] in
                                                         case embeddingM of
                                                           Nothing -> error $ "Failed to read embed.sh output? " ++ "\n" ++ show (T.length doc) ++ "\n" ++ T.unpack doc ++ "\n" ++ U.toString mb
                                                           Just embedding -> return (modelType, embedding)

type Distances = [(String, [String])]

writeOutMatches :: Metadata -> [(String, [(String,Double)])] -> IO ()
writeOutMatches md = Par.mapM_ (writeOutMatch md) -- Par.mapM_ writeOutMatch

writeOutMatch :: Metadata -> (String, [(String,Double)]) -> IO ()
writeOutMatch md = do putStrLn . show

type Forest = RPForest Double (V.Vector (Embed DVector Double String))

embeddings2Forest :: Embeddings -> Forest
embeddings2Forest = embeddings2ForestConfigurable 21 1 6

embeddings2ForestConfigurable :: Int -> Int -> Int -> Embeddings -> Forest
embeddings2ForestConfigurable ls nt pvd es =
  let minLeafSize = ls -- ???
      cfg = rpTreeCfg minLeafSize
              (length es) -- data N
              (length $ (\(_,_,embedding) -> embedding) $ head es) -- dimension of each datapoint (eg 512 for ada-similarity embeddings)
      nTrees = nt -- ???
      projectionVectorDimension = pvd -- ???
  in
    runIdentity $
    forest 0 (fpMaxTreeDepth cfg) minLeafSize nTrees (fpDataChunkSize cfg) (fpProjNzDensity cfg) projectionVectorDimension $
    embeddings2Conduit es
 where
   embeddings2Conduit :: Embeddings -> ConduitT () (Embed DVector Double String) Identity ()
   embeddings2Conduit = sourceList . map (\(p,_,embedding) -> Embed (fromListDv embedding) p)


knnEmbedding :: Forest -> Int -> Embedding -> [(Double, Embed DVector Double String)]
knnEmbedding f k (_,_,embd) = V.toList $
                               -- NOTE: 'metricL2' *seems* to be the L2-normalized Euclidean distance? which is *proportional* to cosine similarity/distance: not identical, but produces the same ranking, and so just as good for my purpose here? or so claims https://stats.stackexchange.com/a/146279/16897
                               knn (metricL2) k f ((fromListDv embd)::DVector Double)

findNearest :: Forest -> Int -> Embedding -> [(String,Double)]
findNearest f k e = map (\(dist,Embed _ p) -> (p,dist)) $ knnEmbedding f k e

-- we'll keep the distance to insert into the metadata for debugging purposes.
findN :: Forest -> Int -> Embedding -> (String,[(String,Double)])
findN f k e@(p1,_,_) = let results = nub $ filter (\(p2,_) -> p1 /= p2) $ findNearest f k e in
                 -- NOTE: 'knn' is the fastest, but seems to return duplicate results, so requesting 10 doesn't return 10 unique hits.
                 -- (I'm not sure why, the rp-tree docs don't mention or warn about this that I noticed...)
                 -- If that happens, back off and request more k.
                 if length results < bestNEmbeddings then findN f (k*2) e else (p1,results)

hyperparameterSweep :: Embeddings -> [(Double, (Int,Int,Int))]
hyperparameterSweep edb =
  let gridsearchParameters = [(1,1,2), (11,1,2), (21,1,2), (31,1,2), (41,1,2), (51,1,2), (61,1,2), (71,1,2), (81,1,2), (91,1,2), (1,3,2), (11,3,2), (21,3,2), (31,3,2), (41,3,2), (51,3,2), (61,3,2), (71,3,2), (81,3,2), (91,3,2), (1,5,2), (11,5,2), (21,5,2), (31,5,2), (41,5,2), (51,5,2), (61,5,2), (71,5,2), (81,5,2), (91,5,2), (1,7,2), (11,7,2), (21,7,2), (31,7,2), (41,7,2), (51,7,2), (61,7,2), (71,7,2), (81,7,2), (91,7,2), (1,9,2), (11,9,2), (21,9,2), (31,9,2), (41,9,2), (51,9,2), (61,9,2), (71,9,2), (81,9,2), (91,9,2), (1,11,2), (11,11,2), (21,11,2), (31,11,2), (41,11,2), (51,11,2), (61,11,2), (71,11,2), (81,11,2), (91,11,2), (1,13,2), (11,13,2), (21,13,2), (31,13,2), (41,13,2), (51,13,2), (61,13,2), (71,13,2), (81,13,2), (91,13,2), (1,15,2), (11,15,2), (21,15,2), (31,15,2), (41,15,2), (51,15,2), (61,15,2), (71,15,2), (81,15,2), (91,15,2), (1,17,2), (11,17,2), (21,17,2), (31,17,2), (41,17,2), (51,17,2), (61,17,2), (71,17,2), (81,17,2), (91,17,2), (1,19,2), (11,19,2), (21,19,2), (31,19,2), (41,19,2), (51,19,2), (61,19,2), (71,19,2), (81,19,2), (91,19,2), (1,1,4), (11,1,4), (21,1,4), (31,1,4), (41,1,4), (51,1,4), (61,1,4), (71,1,4), (81,1,4), (91,1,4), (1,3,4), (11,3,4), (21,3,4), (31,3,4), (41,3,4), (51,3,4), (61,3,4), (71,3,4), (81,3,4), (91,3,4), (1,5,4), (11,5,4), (21,5,4), (31,5,4), (41,5,4), (51,5,4), (61,5,4), (71,5,4), (81,5,4), (91,5,4), (1,7,4), (11,7,4), (21,7,4), (31,7,4), (41,7,4), (51,7,4), (61,7,4), (71,7,4), (81,7,4), (91,7,4), (1,9,4), (11,9,4), (21,9,4), (31,9,4), (41,9,4), (51,9,4), (61,9,4), (71,9,4), (81,9,4), (91,9,4), (1,11,4), (11,11,4), (21,11,4), (31,11,4), (41,11,4), (51,11,4), (61,11,4), (71,11,4), (81,11,4), (91,11,4), (1,13,4), (11,13,4), (21,13,4), (31,13,4), (41,13,4), (51,13,4), (61,13,4), (71,13,4), (81,13,4), (91,13,4), (1,15,4), (11,15,4), (21,15,4), (31,15,4), (41,15,4), (51,15,4), (61,15,4), (71,15,4), (81,15,4), (91,15,4), (1,17,4), (11,17,4), (21,17,4), (31,17,4), (41,17,4), (51,17,4), (61,17,4), (71,17,4), (81,17,4), (91,17,4), (1,19,4), (11,19,4), (21,19,4), (31,19,4), (41,19,4), (51,19,4), (61,19,4), (71,19,4), (81,19,4), (91,19,4), (1,1,6), (11,1,6), (21,1,6), (31,1,6), (41,1,6), (51,1,6), (61,1,6), (71,1,6), (81,1,6), (91,1,6), (1,3,6), (11,3,6), (21,3,6), (31,3,6), (41,3,6), (51,3,6), (61,3,6), (71,3,6), (81,3,6), (91,3,6), (1,5,6), (11,5,6), (21,5,6), (31,5,6), (41,5,6), (51,5,6), (61,5,6), (71,5,6), (81,5,6), (91,5,6), (1,7,6), (11,7,6), (21,7,6), (31,7,6), (41,7,6), (51,7,6), (61,7,6), (71,7,6), (81,7,6), (91,7,6), (1,9,6), (11,9,6), (21,9,6), (31,9,6), (41,9,6), (51,9,6), (61,9,6), (71,9,6), (81,9,6), (91,9,6), (1,11,6), (11,11,6), (21,11,6), (31,11,6), (41,11,6), (51,11,6), (61,11,6), (71,11,6), (81,11,6), (91,11,6), (1,13,6), (11,13,6), (21,13,6), (31,13,6), (41,13,6), (51,13,6), (61,13,6), (71,13,6), (81,13,6), (91,13,6), (1,15,6), (11,15,6), (21,15,6), (31,15,6), (41,15,6), (51,15,6), (61,15,6), (71,15,6), (81,15,6), (91,15,6), (1,17,6), (11,17,6), (21,17,6), (31,17,6), (41,17,6), (51,17,6), (61,17,6), (71,17,6), (81,17,6), (91,17,6), (1,19,6), (11,19,6), (21,19,6), (31,19,6), (41,19,6), (51,19,6), (61,19,6), (71,19,6), (81,19,6), (91,19,6), (1,1,8), (11,1,8), (21,1,8), (31,1,8), (41,1,8), (51,1,8), (61,1,8), (71,1,8), (81,1,8), (91,1,8), (1,3,8), (11,3,8), (21,3,8), (31,3,8), (41,3,8), (51,3,8), (61,3,8), (71,3,8), (81,3,8), (91,3,8), (1,5,8), (11,5,8), (21,5,8), (31,5,8), (41,5,8), (51,5,8), (61,5,8), (71,5,8), (81,5,8), (91,5,8), (1,7,8), (11,7,8), (21,7,8), (31,7,8), (41,7,8), (51,7,8), (61,7,8), (71,7,8), (81,7,8), (91,7,8), (1,9,8), (11,9,8), (21,9,8), (31,9,8), (41,9,8), (51,9,8), (61,9,8), (71,9,8), (81,9,8), (91,9,8), (1,11,8), (11,11,8), (21,11,8), (31,11,8), (41,11,8), (51,11,8), (61,11,8), (71,11,8), (81,11,8), (91,11,8), (1,13,8), (11,13,8), (21,13,8), (31,13,8), (41,13,8), (51,13,8), (61,13,8), (71,13,8), (81,13,8), (91,13,8), (1,15,8), (11,15,8), (21,15,8), (31,15,8), (41,15,8), (51,15,8), (61,15,8), (71,15,8), (81,15,8), (91,15,8), (1,17,8), (11,17,8), (21,17,8), (31,17,8), (41,17,8), (51,17,8), (61,17,8), (71,17,8), (81,17,8), (91,17,8), (1,19,8), (11,19,8), (21,19,8), (31,19,8), (41,19,8), (51,19,8), (61,19,8), (71,19,8), (81,19,8), (91,19,8), (1,1,10), (11,1,10), (21,1,10), (31,1,10), (41,1,10), (51,1,10), (61,1,10), (71,1,10), (81,1,10), (91,1,10), (1,3,10), (11,3,10), (21,3,10), (31,3,10), (41,3,10), (51,3,10), (61,3,10), (71,3,10), (81,3,10), (91,3,10), (1,5,10), (11,5,10), (21,5,10), (31,5,10), (41,5,10), (51,5,10), (61,5,10), (71,5,10), (81,5,10), (91,5,10), (1,7,10), (11,7,10), (21,7,10), (31,7,10), (41,7,10), (51,7,10), (61,7,10), (71,7,10), (81,7,10), (91,7,10), (1,9,10), (11,9,10), (21,9,10), (31,9,10), (41,9,10), (51,9,10), (61,9,10), (71,9,10), (81,9,10), (91,9,10), (1,11,10), (11,11,10), (21,11,10), (31,11,10), (41,11,10), (51,11,10), (61,11,10), (71,11,10), (81,11,10), (91,11,10), (1,13,10), (11,13,10), (21,13,10), (31,13,10), (41,13,10), (51,13,10), (61,13,10), (71,13,10), (81,13,10), (91,13,10), (1,15,10), (11,15,10), (21,15,10), (31,15,10), (41,15,10), (51,15,10), (61,15,10), (71,15,10), (81,15,10), (91,15,10), (1,17,10), (11,17,10), (21,17,10), (31,17,10), (41,17,10), (51,17,10), (61,17,10), (71,17,10), (81,17,10), (91,17,10), (1,19,10), (11,19,10), (21,19,10), (31,19,10), (41,19,10), (51,19,10), (61,19,10), (71,19,10), (81,19,10), (91,19,10), (1,1,12), (11,1,12), (21,1,12), (31,1,12), (41,1,12), (51,1,12), (61,1,12), (71,1,12), (81,1,12), (91,1,12), (1,3,12), (11,3,12), (21,3,12), (31,3,12), (41,3,12), (51,3,12), (61,3,12), (71,3,12), (81,3,12), (91,3,12), (1,5,12), (11,5,12), (21,5,12), (31,5,12), (41,5,12), (51,5,12), (61,5,12), (71,5,12), (81,5,12), (91,5,12), (1,7,12), (11,7,12), (21,7,12), (31,7,12), (41,7,12), (51,7,12), (61,7,12), (71,7,12), (81,7,12), (91,7,12), (1,9,12), (11,9,12), (21,9,12), (31,9,12), (41,9,12), (51,9,12), (61,9,12), (71,9,12), (81,9,12), (91,9,12), (1,11,12), (11,11,12), (21,11,12), (31,11,12), (41,11,12), (51,11,12), (61,11,12), (71,11,12), (81,11,12), (91,11,12), (1,13,12), (11,13,12), (21,13,12), (31,13,12), (41,13,12), (51,13,12), (61,13,12), (71,13,12), (81,13,12), (91,13,12), (1,15,12), (11,15,12), (21,15,12), (31,15,12), (41,15,12), (51,15,12), (61,15,12), (71,15,12), (81,15,12), (91,15,12), (1,17,12), (11,17,12), (21,17,12), (31,17,12), (41,17,12), (51,17,12), (61,17,12), (71,17,12), (81,17,12), (91,17,12), (1,19,12), (11,19,12), (21,19,12), (31,19,12), (41,19,12), (51,19,12), (61,19,12), (71,19,12), (81,19,12), (91,19,12), (1,1,14), (11,1,14), (21,1,14), (31,1,14), (41,1,14), (51,1,14), (61,1,14), (71,1,14), (81,1,14), (91,1,14), (1,3,14), (11,3,14), (21,3,14), (31,3,14), (41,3,14), (51,3,14), (61,3,14), (71,3,14), (81,3,14), (91,3,14), (1,5,14), (11,5,14), (21,5,14), (31,5,14), (41,5,14), (51,5,14), (61,5,14), (71,5,14), (81,5,14), (91,5,14), (1,7,14), (11,7,14), (21,7,14), (31,7,14), (41,7,14), (51,7,14), (61,7,14), (71,7,14), (81,7,14), (91,7,14), (1,9,14), (11,9,14), (21,9,14), (31,9,14), (41,9,14), (51,9,14), (61,9,14), (71,9,14), (81,9,14), (91,9,14), (1,11,14), (11,11,14), (21,11,14), (31,11,14), (41,11,14), (51,11,14), (61,11,14), (71,11,14), (81,11,14), (91,11,14), (1,13,14), (11,13,14), (21,13,14), (31,13,14), (41,13,14), (51,13,14), (61,13,14), (71,13,14), (81,13,14), (91,13,14), (1,15,14), (11,15,14), (21,15,14), (31,15,14), (41,15,14), (51,15,14), (61,15,14), (71,15,14), (81,15,14), (91,15,14), (1,17,14), (11,17,14), (21,17,14), (31,17,14), (41,17,14), (51,17,14), (61,17,14), (71,17,14), (81,17,14), (91,17,14), (1,19,14), (11,19,14), (21,19,14), (31,19,14), (41,19,14), (51,19,14), (61,19,14), (71,19,14), (81,19,14), (91,19,14), (1,1,16), (11,1,16), (21,1,16), (31,1,16), (41,1,16), (51,1,16), (61,1,16), (71,1,16), (81,1,16), (91,1,16), (1,3,16), (11,3,16), (21,3,16), (31,3,16), (41,3,16), (51,3,16), (61,3,16), (71,3,16), (81,3,16), (91,3,16), (1,5,16), (11,5,16), (21,5,16), (31,5,16), (41,5,16), (51,5,16), (61,5,16), (71,5,16), (81,5,16), (91,5,16), (1,7,16), (11,7,16), (21,7,16), (31,7,16), (41,7,16), (51,7,16), (61,7,16), (71,7,16), (81,7,16), (91,7,16), (1,9,16), (11,9,16), (21,9,16), (31,9,16), (41,9,16), (51,9,16), (61,9,16), (71,9,16), (81,9,16), (91,9,16), (1,11,16), (11,11,16), (21,11,16), (31,11,16), (41,11,16), (51,11,16), (61,11,16), (71,11,16), (81,11,16), (91,11,16), (1,13,16), (11,13,16), (21,13,16), (31,13,16), (41,13,16), (51,13,16), (61,13,16), (71,13,16), (81,13,16), (91,13,16), (1,15,16), (11,15,16), (21,15,16), (31,15,16), (41,15,16), (51,15,16), (61,15,16), (71,15,16), (81,15,16), (91,15,16), (1,17,16), (11,17,16), (21,17,16), (31,17,16), (41,17,16), (51,17,16), (61,17,16), (71,17,16), (81,17,16), (91,17,16), (1,19,16), (11,19,16), (21,19,16), (31,19,16), (41,19,16), (51,19,16), (61,19,16), (71,19,16), (81,19,16), (91,19,16), (1,1,18), (11,1,18), (21,1,18), (31,1,18), (41,1,18), (51,1,18), (61,1,18), (71,1,18), (81,1,18), (91,1,18), (1,3,18), (11,3,18), (21,3,18), (31,3,18), (41,3,18), (51,3,18), (61,3,18), (71,3,18), (81,3,18), (91,3,18), (1,5,18), (11,5,18), (21,5,18), (31,5,18), (41,5,18), (51,5,18), (61,5,18), (71,5,18), (81,5,18), (91,5,18), (1,7,18), (11,7,18), (21,7,18), (31,7,18), (41,7,18), (51,7,18), (61,7,18), (71,7,18), (81,7,18), (91,7,18), (1,9,18), (11,9,18), (21,9,18), (31,9,18), (41,9,18), (51,9,18), (61,9,18), (71,9,18), (81,9,18), (91,9,18), (1,11,18), (11,11,18), (21,11,18), (31,11,18), (41,11,18), (51,11,18), (61,11,18), (71,11,18), (81,11,18), (91,11,18), (1,13,18), (11,13,18), (21,13,18), (31,13,18), (41,13,18), (51,13,18), (61,13,18), (71,13,18), (81,13,18), (91,13,18), (1,15,18), (11,15,18), (21,15,18), (31,15,18), (41,15,18), (51,15,18), (61,15,18), (71,15,18), (81,15,18), (91,15,18), (1,17,18), (11,17,18), (21,17,18), (31,17,18), (41,17,18), (51,17,18), (61,17,18), (71,17,18), (81,17,18), (91,17,18), (1,19,18), (11,19,18), (21,19,18), (31,19,18), (41,19,18), (51,19,18), (61,19,18), (71,19,18), (81,19,18), (91,19,18), (1,1,20), (11,1,20), (21,1,20), (31,1,20), (41,1,20), (51,1,20), (61,1,20), (71,1,20), (81,1,20), (91,1,20), (1,3,20), (11,3,20), (21,3,20), (31,3,20), (41,3,20), (51,3,20), (61,3,20), (71,3,20), (81,3,20), (91,3,20), (1,5,20), (11,5,20), (21,5,20), (31,5,20), (41,5,20), (51,5,20), (61,5,20), (71,5,20), (81,5,20), (91,5,20), (1,7,20), (11,7,20), (21,7,20), (31,7,20), (41,7,20), (51,7,20), (61,7,20), (71,7,20), (81,7,20), (91,7,20), (1,9,20), (11,9,20), (21,9,20), (31,9,20), (41,9,20), (51,9,20), (61,9,20), (71,9,20), (81,9,20), (91,9,20), (1,11,20), (11,11,20), (21,11,20), (31,11,20), (41,11,20), (51,11,20), (61,11,20), (71,11,20), (81,11,20), (91,11,20), (1,13,20), (11,13,20), (21,13,20), (31,13,20), (41,13,20), (51,13,20), (61,13,20), (71,13,20), (81,13,20), (91,13,20), (1,15,20), (11,15,20), (21,15,20), (31,15,20), (41,15,20), (51,15,20), (61,15,20), (71,15,20), (81,15,20), (91,15,20), (1,17,20), (11,17,20), (21,17,20), (31,17,20), (41,17,20), (51,17,20), (61,17,20), (71,17,20), (81,17,20), (91,17,20), (1,19,20), (11,19,20), (21,19,20), (31,19,20), (41,19,20), (51,19,20), (61,19,20), (71,19,20), (81,19,20), (91,19,20)] :: [(Int,Int,Int)] in
  reverse $ sort $ parMap rseq (\z@(a,b,c) -> let f = embeddings2ForestConfigurable a b c edb in (recallWith metricL2 f 10 $ (\(_,_,embd) -> ((fromListDv embd)::DVector Double)) $ head edb, z)) gridsearchParameters
-- [(1.0,(91,1,12)),(1.0,(81,1,12)),(1.0,(81,1,6)),(1.0,(71,1,12)),(1.0,(71,1,6)),(1.0,(61,1,12)),(1.0,(61,1,6)),(1.0,(51,1,12)),(1.0,(51,1,6)),(1.0,(41,1,12)),(1.0,(41,1,6)),(1.0,(21,1,6)),
-- (0.9,(91,1,20)),(0.9,(91,1,18)),(0.9,(91,1,6)),(0.9,(81,1,20)),(0.9,(81,1,18)),(0.9,(71,1,20)),(0.9,(71,1,18)),(0.9,(71,1,10)),(0.9,(61,1,20)),(0.9,(61,1,18)),(0.9,(61,1,10)),(0.9,(51,1,20)),(0.9,(51,1,18)),(0.9,(51,1,10)),(0.9,(41,1,20)),(0.9,(31,1,20)),(0.9,(31,1,12)),(0.9,(31,1,6)),(0.9,(21,1,20)),(0.9,(21,1,12)),(0.9,(11,1,20)),(0.9,(11,1,12)),(0.8,(91,1,10)),(0.8,(81,1,10)),(0.8,(41,1,10)),(0.8,(31,1,10)),(0.8,(11,1,6)),(0.8,(1,1,20)),(0.7333333333333334,(31,3,16)),(0.72,(91,5,12)),(0.72,(81,5,12)),(0.72,(51,5,12)),(0.7090909090909091,(51,11,12)),(0.7000000000000001,(91,3,20)),(0.7000000000000001,(91,3,18)),(0.7000000000000001,(81,3,18)),(0.7000000000000001,(61,11,12)),(0.7000000000000001,(51,3,20)),(0.7000000000000001,(41,3,16)),(0.7,(91,5,14)),(0.7,(71,5,12)),(0.7,(61,5,12)),(0.7,(51,9,12)),(0.7,(21,1,10)),(0.7,(11,1,10)),(0.7,(1,1,12)),(0.7,(1,1,10)),(0.7,(1,1,6)),(0.6909090909090909,(91,11,12)),(0.6909090909090909,(71,11,12)),(0.6909090909090908,(81,11,12)),(0.6888888888888889,(61,9,12)),(0.6882352941176472,(91,17,12)),(0.6882352941176472,(51,17,12)),(0.6857142857142857,(51,7,12)),(0.6823529411764707,(61,17,12)),(0.6823529411764706,(81,17,12)),(0.68,(91,15,12)),(0.68,(51,15,12)),(0.68,(51,5,14)),(0.6799999999999999,(81,5,14)),(0.6799999999999999,(71,5,14)),(0.6799999999999999,(61,5,14)),(0.6789473684210526,(91,19,12)),(0.6789473684210526,(51,19,12)),(0.6777777777777777,(91,9,12)),(0.6777777777777777,(71,9,12)),(0.6777777777777776,(81,9,12)),(0.676923076923077,(91,13,12)),(0.676923076923077,(51,13,12)),(0.6736842105263158,(81,19,12)),(0.6736842105263158,(61,19,12)),(0.6733333333333335,(61,15,12)),(0.6714285714285715,(61,7,12)),(0.6714285714285714,(91,7,12)),(0.6714285714285714,(81,7,12)),(0.6705882352941177,(71,17,12)),(0.6692307692307693,(61,13,12)),(0.6666666666666666,(91,3,14)),(0.6666666666666666,(91,3,12)),(0.6666666666666666,(81,15,12)),(0.6666666666666666,(81,3,14)),(0.6666666666666666,(81,3,12)),(0.6666666666666666,(71,3,18)),(0.6666666666666666,(71,3,14)),(0.6666666666666666,(61,3,18)),(0.6666666666666666,(61,3,14)),(0.6666666666666666,(61,3,12)),(0.6666666666666666,(51,3,18)),(0.6666666666666666,(51,3,12)),(0.6666666666666666,(41,3,10)),(0.6666666666666666,(41,3,6)),(0.6666666666666666,(21,3,10)),(0.6666666666666666,(21,3,6)),(0.6631578947368421,(71,19,12)),(0.6615384615384615,(81,13,12)),(0.6615384615384615,(71,13,12)),(0.66,(71,15,12)),(0.66,(71,5,10)),(0.66,(61,5,10)),(0.66,(51,5,10)),(0.6571428571428571,(91,7,20)),(0.6571428571428571,(71,7,12)),(0.6555555555555554,(91,9,20)),(0.6454545454545454,(91,11,20)),(0.64,(41,5,10)),(0.6363636363636364,(51,11,20)),(0.6333333333333334,(51,3,14)),(0.6333333333333334,(41,3,20)),(0.6333333333333334,(31,3,20)),(0.6333333333333333,(81,3,20)),(0.6333333333333333,(81,3,6)),(0.6333333333333333,(71,3,20)),(0.6333333333333333,(71,3,12)),(0.6333333333333333,(71,3,10)),(0.6333333333333333,(71,3,6)),(0.6333333333333333,(61,3,20)),(0.6333333333333333,(61,3,10)),(0.6333333333333333,(61,3,6)),(0.6333333333333333,(51,9,20)),(0.6333333333333333,(51,3,10)),(0.6333333333333333,(51,3,6)),(0.6307692307692307,(91,13,20)),(0.6307692307692307,(51,13,20)),(0.6285714285714287,(31,7,16)),(0.6285714285714284,(61,7,6)),(0.6285714285714284,(51,7,6)),(0.6230769230769231,(51,13,16)),(0.6222222222222222,(71,9,20)),(0.6222222222222222,(41,9,6)),(0.62,(81,5,10)),(0.62,(41,5,6)),(0.6181818181818182,(71,11,20)),(0.6181818181818182,(61,11,20)),(0.6157894736842104,(91,19,18)),(0.6153846153846154,(71,13,20)),(0.6153846153846154,(61,13,20)),(0.6153846153846154,(61,13,16)),(0.6142857142857144,(51,7,20)),(0.6142857142857142,(81,7,6)),(0.6133333333333333,(91,15,20)),(0.6133333333333333,(51,15,20)),(0.611764705882353,(91,17,6)),(0.6117647058823529,(71,17,6)),(0.6111111111111112,(81,9,20)),(0.6111111111111112,(81,9,6)),(0.6111111111111112,(61,9,20)),(0.611111111111111,(61,9,6)),(0.611111111111111,(51,9,6)),(0.6090909090909091,(81,11,20)),(0.6090909090909091,(51,11,16)),(0.6066666666666667,(51,15,16)),(0.6058823529411765,(61,17,6)),(0.6058823529411765,(51,17,6)),(0.6058823529411764,(91,17,20)),(0.6052631578947368,(81,19,18)),(0.6052631578947368,(71,19,18)),(0.6000000000000001,(91,11,18)),(0.6000000000000001,(91,9,18)),(0.6000000000000001,(91,5,10)),(0.6000000000000001,(81,17,6)),(0.6000000000000001,(81,13,20)),(0.6000000000000001,(71,19,16)),(0.6000000000000001,(31,9,16)),(0.6000000000000001,(21,11,18)),(0.6000000000000001,(21,3,18)),(0.6,(91,17,18)),(0.6,(91,5,20)),(0.6,(91,3,6)),(0.6,(81,7,20)),(0.6,(71,15,20)),(0.6,(71,13,16)),(0.6,(71,7,20)),(0.6,(61,19,18)),(0.6,(61,15,20)),(0.6,(51,19,18)),(0.6,(51,19,16)),(0.6,(51,17,20)),(0.6,(51,7,16)),(0.6,(41,7,16)),(0.6,(41,7,6)),(0.6,(31,3,6)),(0.6,(31,1,16)),(0.5999999999999999,(91,11,6)),(0.5999999999999999,(71,7,6)),(0.5941176470588235,(71,17,20)),(0.5933333333333334,(61,15,16)),(0.5923076923076924,(31,13,16)),(0.5909090909090909,(81,11,6)),(0.5909090909090909,(61,11,16)),(0.5909090909090907,(71,11,6)),(0.5894736842105264,(61,19,16)),(0.5888888888888889,(41,9,10)),(0.5888888888888889,(31,9,6)),(0.5888888888888888,(91,9,6)),(0.5888888888888888,(71,9,6)),(0.5882352941176471,(81,17,18)),(0.5882352941176471,(71,17,18)),(0.5882352941176471,(61,17,20)),(0.5882352941176471,(61,17,18)),(0.5882352941176471,(51,17,18)),(0.5882352941176471,(51,17,16)),(0.5866666666666667,(81,15,20)),(0.5866666666666667,(31,15,16)),(0.5866666666666666,(91,15,18)),(0.5866666666666666,(91,15,6)),(0.5866666666666664,(71,15,6)),(0.5857142857142857,(61,7,20)),(0.5857142857142857,(11,7,10)),(0.5857142857142856,(91,7,6)),(0.5857142857142856,(21,7,6)),(0.5846153846153846,(41,13,16)),(0.5846153846153845,(91,13,6)),(0.5846153846153845,(81,13,16)),(0.5846153846153844,(71,13,6)),(0.5823529411764707,(81,17,20)),(0.5823529411764707,(71,17,16)),(0.5818181818181819,(91,11,10)),(0.5818181818181819,(81,11,18)),(0.5818181818181819,(51,11,18)),(0.5818181818181818,(61,11,18)),(0.5818181818181817,(61,11,6)),(0.5818181818181817,(51,11,6)),(0.5800000000000001,(71,15,16)),(0.5800000000000001,(41,5,12)),(0.5800000000000001,(31,5,10)),(0.5800000000000001,(11,5,6)),(0.58,(61,15,18)),(0.58,(61,15,6)),(0.58,(51,15,18)),(0.58,(51,15,6)),(0.58,(21,5,10)),(0.58,(21,5,6)),(0.58,(11,5,12)),(0.5789473684210527,(91,19,6)),(0.5789473684210525,(71,19,6)),(0.5777777777777778,(81,9,18)),(0.5777777777777778,(51,9,18)),(0.5777777777777778,(51,9,16)),(0.5777777777777778,(41,9,16)),(0.5777777777777778,(21,9,18)),(0.5777777777777777,(31,9,18)),(0.576923076923077,(91,13,16)),(0.5769230769230769,(91,13,18)),(0.5769230769230769,(81,13,6)),(0.5769230769230769,(61,13,6)),(0.5769230769230769,(51,13,6)),(0.5764705882352942,(61,17,16)),(0.5736842105263159,(91,19,16)),(0.5736842105263159,(81,19,16)),(0.5736842105263158,(61,19,6)),(0.5736842105263158,(51,19,6)),(0.5733333333333335,(41,15,16)),(0.5733333333333334,(81,15,18)),(0.5733333333333334,(81,15,6)),(0.5733333333333334,(71,15,18)),(0.5733333333333334,(41,15,12)),(0.5733333333333334,(31,15,12)),(0.5727272727272728,(71,11,18)),(0.5727272727272728,(71,11,16)),(0.5727272727272728,(41,11,10)),(0.5727272727272728,(31,11,16)),(0.5714285714285714,(61,7,16)),(0.5714285714285714,(41,7,10)),(0.5714285714285714,(31,7,18)),(0.5714285714285714,(21,7,18)),(0.5692307692307693,(91,13,10)),(0.5692307692307692,(21,13,18)),(0.5684210526315789,(91,19,20)),(0.5684210526315789,(81,19,6)),(0.5684210526315789,(51,19,20)),(0.5666666666666668,(91,3,10)),(0.5666666666666668,(81,3,10)),(0.5666666666666668,(31,3,10)),(0.5666666666666668,(21,3,20)),(0.5666666666666667,(71,9,18)),(0.5666666666666667,(61,9,18)),(0.5666666666666667,(41,15,10)),(0.5666666666666667,(41,3,12)),(0.5666666666666667,(11,3,12)),(0.5647058823529413,(91,17,16)),(0.5647058823529413,(81,17,16)),(0.5636363636363637,(91,11,16)),(0.5636363636363636,(81,11,16)),(0.5636363636363636,(61,11,10)),(0.5636363636363636,(51,11,10)),(0.5636363636363636,(41,11,16)),(0.5636363636363636,(11,11,12)),(0.5615384615384615,(81,13,18)),(0.5615384615384615,(61,13,10)),(0.5615384615384615,(51,13,18)),(0.5615384615384615,(51,13,10)),(0.5615384615384615,(21,13,6)),(0.5615384615384614,(61,13,18)),(0.5600000000000002,(41,15,6)),(0.56,(51,5,20)),(0.56,(31,5,16)),(0.5599999999999999,(61,5,6)),(0.5599999999999999,(51,5,16)),(0.5599999999999999,(51,5,6)),(0.5599999999999999,(31,5,12)),(0.5599999999999999,(31,5,6)),(0.5578947368421052,(71,19,20)),(0.5578947368421052,(61,19,20)),(0.5571428571428572,(91,7,18)),(0.5571428571428572,(91,7,14)),(0.5571428571428572,(71,7,10)),(0.5571428571428572,(61,7,10)),(0.5571428571428572,(51,7,10)),(0.557142857142857,(31,7,6)),(0.5555555555555557,(91,9,10)),(0.5555555555555556,(61,9,16)),(0.5555555555555556,(61,9,10)),(0.5555555555555556,(51,9,10)),(0.5555555555555556,(21,9,6)),(0.5555555555555556,(11,9,10)),(0.5555555555555555,(11,9,12)),(0.5545454545454546,(71,11,10)),(0.5545454545454546,(11,11,10)),(0.5545454545454545,(31,11,18)),(0.5538461538461539,(41,13,6)),(0.5538461538461538,(71,13,18)),(0.5538461538461538,(41,13,12)),(0.5533333333333333,(91,15,16)),(0.5533333333333333,(81,15,16)),(0.5529411764705883,(41,17,12)),(0.5529411764705883,(31,17,12)),(0.5526315789473685,(41,19,12)),(0.5526315789473685,(31,19,12)),(0.5473684210526317,(81,19,20)),(0.5470588235294118,(41,17,6)),(0.5470588235294117,(11,17,10)),(0.5466666666666667,(31,15,6)),(0.5466666666666667,(21,15,18)),(0.5461538461538462,(71,13,10)),(0.5461538461538461,(31,13,12)),(0.5454545454545455,(81,11,10)),(0.5454545454545455,(41,11,6)),(0.5454545454545454,(41,11,20)),(0.5444444444444445,(71,9,10)),(0.5444444444444445,(31,9,10)),(0.5444444444444444,(41,9,18)),(0.5428571428571428,(71,7,16)),(0.5428571428571428,(41,7,18)),(0.5428571428571428,(11,7,18)),(0.5428571428571428,(11,7,12)),(0.5400000000000001,(61,15,10)),(0.5400000000000001,(51,15,10)),(0.54,(91,5,18)),(0.54,(81,5,18)),(0.54,(11,5,10)),(0.5399999999999999,(81,5,6)),(0.5399999999999999,(21,5,12)),(0.5384615384615385,(81,13,10)),(0.5384615384615384,(41,13,20)),(0.5384615384615384,(41,13,10)),(0.5384615384615384,(31,13,20)),(0.5384615384615384,(31,13,18)),(0.5384615384615384,(31,13,6)),(0.5368421052631579,(41,19,10)),(0.5363636363636364,(31,11,10)),(0.5363636363636363,(41,11,12)),(0.5363636363636363,(31,11,20)),(0.5363636363636363,(31,11,6)),(0.5352941176470589,(61,17,10)),(0.5352941176470589,(51,17,10)),(0.5352941176470588,(41,17,10)),(0.5352941176470588,(31,17,6)),(0.5333333333333334,(81,9,10)),(0.5333333333333333,(71,9,16)),(0.5333333333333333,(41,9,12)),(0.5333333333333333,(41,3,14)),(0.5333333333333333,(31,15,10)),(0.5333333333333333,(31,3,14)),(0.5333333333333333,(11,3,10)),(0.531578947368421,(11,19,10)),(0.5307692307692308,(21,13,20)),(0.5285714285714287,(91,7,10)),(0.5285714285714287,(51,7,14)),(0.5285714285714286,(81,7,18)),(0.5285714285714286,(81,7,16)),(0.5285714285714286,(81,7,14)),(0.5285714285714286,(81,7,10)),(0.5285714285714286,(71,7,14)),(0.5285714285714286,(61,7,14)),(0.5285714285714286,(51,7,18)),(0.5285714285714286,(11,7,6)),(0.5272727272727272,(41,11,18)),(0.5266666666666667,(91,15,10)),(0.5266666666666666,(41,15,20)),(0.5266666666666666,(31,15,20)),(0.5266666666666666,(11,15,10)),(0.5263157894736842,(41,19,6)),(0.5263157894736842,(31,19,16)),(0.5263157894736842,(21,19,6)),(0.523529411764706,(91,17,10)),(0.5235294117647059,(31,17,16)),(0.5235294117647059,(21,17,18)),(0.5222222222222224,(91,9,16)),(0.5222222222222223,(91,9,14)),(0.5222222222222223,(81,9,16)),(0.5222222222222223,(21,9,20)),(0.5222222222222221,(31,9,12)),(0.5222222222222221,(21,9,10)),(0.5222222222222221,(11,9,18)),(0.52,(81,5,20)),(0.52,(71,15,10)),(0.52,(71,5,20)),(0.52,(71,5,18)),(0.52,(61,5,20)),(0.52,(61,5,18)),(0.52,(61,5,16)),(0.52,(51,5,18)),(0.52,(41,5,16)),(0.52,(31,15,18)),(0.52,(21,5,20)),(0.5199999999999999,(71,5,6)),(0.5199999999999999,(41,5,14)),(0.5199999999999999,(31,5,14)),(0.5176470588235295,(71,17,10)),(0.5157894736842106,(61,19,10)),(0.5157894736842106,(51,19,10)),(0.5153846153846153,(41,13,18)),(0.5142857142857143,(91,7,16)),(0.5142857142857143,(31,7,10)),(0.5142857142857142,(71,7,18)),(0.5142857142857142,(61,7,18)),(0.5142857142857142,(21,7,10)),(0.5133333333333334,(21,15,20)),(0.5133333333333334,(21,15,6)),(0.511764705882353,(41,17,16)),(0.511764705882353,(21,17,6)),(0.5105263157894737,(41,19,16)),(0.5105263157894736,(31,19,10)),(0.5105263157894736,(31,19,6)),(0.5090909090909091,(91,11,14)),(0.509090909090909,(31,11,12)),(0.5090909090909089,(21,11,10)),(0.5076923076923078,(31,13,10)),(0.5076923076923077,(11,13,10)),(0.5076923076923076,(21,13,12)),(0.5066666666666667,(81,15,10)),(0.5066666666666666,(41,15,18)),(0.5066666666666666,(21,15,12)),(0.5058823529411766,(81,17,10)),(0.5058823529411764,(31,17,10)),(0.5058823529411763,(21,17,10)),(0.505263157894737,(91,19,10)),(0.5000000000000001,(41,7,12)),(0.5,(91,1,16)),(0.5,(91,1,14)),(0.5,(81,9,14)),(0.5,(81,1,14)),(0.5,(71,19,10)),(0.5,(71,9,14)),(0.5,(71,5,16)),(0.5,(71,1,14)),(0.5,(61,11,14)),(0.5,(61,9,14)),(0.5,(61,1,16)),(0.5,(61,1,14)),(0.5,(51,11,14)),(0.5,(51,9,14)),(0.5,(51,3,16)),(0.5,(51,1,16)),(0.5,(51,1,14)),(0.5,(41,5,20)),(0.5,(41,1,16)),(0.5,(41,1,14)),(0.5,(31,5,20)),(0.5,(31,5,18)),(0.5,(31,3,12)),(0.5,(31,1,18)),(0.5,(31,1,14)),(0.5,(21,19,12)),(0.5,(21,11,20)),(0.5,(21,11,6)),(0.5,(21,3,12)),(0.5,(21,1,16)),(0.5,(21,1,14)),(0.5,(11,15,18)),(0.5,(11,3,6)),(0.5,(1,3,12)),(0.49999999999999994,(11,13,12)),(0.49999999999999994,(11,11,18)),(0.4999999999999999,(91,5,6)),(0.4999999999999999,(21,19,10)),(0.4947368421052632,(21,19,18)),(0.49411764705882344,(31,17,18)),(0.49411764705882344,(11,17,18)),(0.4923076923076923,(11,13,18)),(0.4923076923076922,(21,13,10)),(0.49090909090909096,(81,11,14)),(0.49090909090909096,(71,11,14)),(0.48947368421052634,(81,19,10)),(0.4888888888888888,(41,9,20)),(0.4882352941176471,(21,17,20)),(0.488235294117647,(41,17,18)),(0.4857142857142857,(31,7,12)),(0.4857142857142857,(21,7,20)),(0.4857142857142857,(21,7,12)),(0.48571428571428565,(41,7,14)),(0.48571428571428565,(31,7,14)),(0.48461538461538467,(21,13,8)),(0.48421052631578954,(21,19,20)),(0.48235294117647054,(41,17,20)),(0.48235294117647054,(31,17,20)),(0.48235294117647054,(21,17,12)),(0.4800000000000001,(91,5,16)),(0.4800000000000001,(81,5,16)),(0.48,(1,5,10)),(0.47999999999999987,(11,15,12)),(0.4789473684210526,(91,19,14)),(0.47777777777777786,(21,9,8)),(0.47777777777777775,(31,9,20)),(0.47368421052631576,(71,19,14)),(0.4733333333333333,(21,15,10)),(0.47272727272727283,(21,11,8)),(0.47272727272727266,(21,11,12)),(0.4714285714285714,(41,7,20)),(0.4714285714285714,(31,7,20)),(0.47058823529411764,(91,17,14)),(0.46842105263157896,(51,19,14)),(0.46842105263157885,(41,19,20)),(0.46842105263157885,(31,19,20)),(0.46842105263157885,(31,19,18)),(0.46842105263157885,(11,19,12)),(0.4666666666666666,(21,3,14)),(0.46666666666666656,(21,9,12)),(0.46315789473684216,(81,19,14)),(0.46315789473684216,(61,19,14)),(0.46315789473684205,(41,19,18)),(0.4615384615384616,(91,13,14)),(0.46153846153846156,(11,13,6)),(0.45999999999999996,(41,5,18)),(0.45999999999999996,(11,5,18)),(0.45882352941176463,(11,17,12)),(0.45789473684210513,(11,19,18)),(0.45454545454545453,(1,11,10)),(0.4538461538461539,(61,13,14)),(0.4538461538461539,(51,13,14)),(0.4533333333333333,(41,15,14)),(0.4529411764705883,(71,17,14)),(0.45294117647058824,(61,17,14)),(0.45294117647058824,(51,17,14)),(0.4473684210526316,(21,19,16)),(0.4473684210526316,(21,19,14)),(0.44705882352941184,(81,17,14)),(0.4466666666666667,(21,15,8)),(0.44666666666666666,(61,15,8)),(0.44666666666666666,(11,15,6)),(0.4466666666666666,(31,15,14)),(0.44615384615384623,(81,13,14)),(0.44615384615384623,(71,13,14)),(0.4461538461538461,(21,13,16)),(0.4454545454545454,(11,11,20)),(0.4444444444444444,(41,9,14)),(0.4444444444444444,(31,9,14)),(0.4444444444444444,(21,9,16)),(0.4444444444444444,(11,9,6)),(0.4444444444444444,(1,9,12)),(0.44285714285714295,(21,7,8)),(0.44117647058823534,(21,17,8)),(0.44000000000000006,(91,5,8)),(0.44000000000000006,(51,15,8)),(0.43846153846153846,(41,13,14)),(0.43846153846153846,(1,13,10)),(0.43684210526315786,(41,19,14)),(0.43684210526315786,(31,19,14)),(0.43636363636363634,(21,11,16)),(0.4333333333333334,(91,15,14)),(0.4333333333333334,(91,15,8)),(0.43333333333333335,(71,15,8)),(0.43333333333333335,(61,3,16)),(0.43333333333333335,(21,3,16)),(0.43333333333333335,(21,3,8)),(0.43333333333333335,(11,3,20)),(0.43333333333333335,(11,3,18)),(0.43333333333333335,(1,9,10)),(0.43333333333333335,(1,3,10)),(0.4333333333333333,(11,9,20)),(0.4333333333333333,(1,3,14)),(0.4307692307692308,(41,13,8)),(0.4307692307692308,(31,13,8)),(0.4294117647058824,(91,17,8)),(0.42857142857142855,(1,7,10)),(0.4272727272727273,(41,11,14)),(0.4272727272727273,(41,11,8)),(0.4272727272727273,(31,11,8)),(0.4266666666666667,(81,15,8)),(0.4266666666666667,(1,15,10)),(0.42666666666666664,(21,15,16)),(0.42352941176470593,(1,17,10)),(0.4235294117647059,(41,17,8)),(0.4235294117647059,(21,17,16)),(0.4235294117647059,(11,17,6)),(0.4235294117647058,(31,17,14)),(0.423076923076923,(31,13,14)),(0.42105263157894735,(41,19,8)),(0.42105263157894735,(1,19,10)),(0.42000000000000004,(21,5,18)),(0.42000000000000004,(1,5,12)),(0.41999999999999993,(1,5,8)),(0.41818181818181815,(31,11,14)),(0.41818181818181815,(11,11,6)),(0.41764705882352937,(61,17,8)),(0.41764705882352937,(41,17,14)),(0.41764705882352937,(21,17,14)),(0.4157894736842106,(21,19,8)),(0.41538461538461535,(11,13,20)),(0.41428571428571426,(41,7,8)),(0.41428571428571426,(1,7,12)),(0.4133333333333334,(81,15,14)),(0.4133333333333334,(71,15,14)),(0.41333333333333333,(61,15,14)),(0.41333333333333333,(51,15,14)),(0.41333333333333333,(41,15,8)),(0.4117647058823529,(81,17,8)),(0.4117647058823529,(71,17,8)),(0.4117647058823529,(51,17,8)),(0.4117647058823529,(31,17,8)),(0.41111111111111115,(91,9,8)),(0.40769230769230774,(61,13,8)),(0.4066666666666667,(21,15,4)),(0.4000000000000001,(91,13,8)),(0.4000000000000001,(51,13,8)),(0.4,(91,19,8)),(0.4,(91,11,8)),(0.4,(91,7,8)),(0.4,(81,5,8)),(0.4,(81,1,16)),(0.4,(71,13,8)),(0.4,(71,1,16)),(0.4,(41,9,8)),(0.4,(41,1,18)),(0.4,(31,19,8)),(0.4,(31,15,8)),(0.4,(21,19,4)),(0.4,(21,1,18)),(0.4,(11,5,20)),(0.4,(11,1,18)),(0.4,(11,1,14)),(0.39999999999999997,(91,3,8)),(0.39999999999999997,(71,3,16)),(0.39999999999999997,(31,7,8)),(0.39999999999999997,(31,3,18)),(0.39999999999999997,(21,7,4)),(0.39999999999999997,(11,19,6)),(0.39999999999999997,(1,11,12)),(0.39999999999999997,(1,3,4)),(0.3941176470588236,(21,17,4)),(0.39411764705882346,(11,17,20)),(0.39230769230769236,(81,13,8)),(0.3923076923076923,(1,13,12)),(0.390909090909091,(61,11,8)),(0.390909090909091,(51,11,8)),(0.3894736842105263,(61,19,8)),(0.3894736842105263,(11,19,20)),(0.388888888888889,(61,9,8)),(0.388888888888889,(51,9,8)),(0.3888888888888889,(31,9,8)),(0.38666666666666666,(21,15,14)),(0.3857142857142857,(21,7,14)),(0.38421052631578945,(81,19,8)),(0.38421052631578945,(71,19,8)),(0.38421052631578945,(51,19,8)),(0.38235294117647056,(1,17,12)),(0.38181818181818183,(71,11,8)),(0.3818181818181818,(11,11,8)),(0.38,(71,5,8)),(0.38,(61,5,8)),(0.38,(51,5,8)),(0.38,(21,5,8)),(0.38,(1,5,6)),(0.37999999999999995,(1,15,12)),(0.3789473684210526,(1,19,12)),(0.3777777777777778,(81,9,8)),(0.3777777777777778,(71,9,8)),(0.37777777777777777,(21,9,4)),(0.3777777777777777,(21,9,14)),(0.37368421052631573,(11,19,8)),(0.3733333333333333,(11,15,20)),(0.3727272727272728,(81,11,8)),(0.3714285714285715,(61,7,8)),(0.3714285714285715,(51,7,8)),(0.37142857142857144,(21,7,16)),(0.3714285714285714,(11,7,20)),(0.3714285714285714,(11,7,8)),(0.3714285714285714,(1,7,8)),(0.3666666666666667,(91,3,16)),(0.3666666666666667,(81,3,16)),(0.3666666666666667,(81,3,8)),(0.36666666666666664,(1,3,6)),(0.3666666666666666,(11,15,8)),(0.3666666666666666,(11,9,8)),(0.36153846153846153,(1,13,14)),(0.36,(41,5,8)),(0.36,(21,5,14)),(0.36,(11,5,8)),(0.36,(1,5,18)),(0.35882352941176476,(11,17,16)),(0.35789473684210527,(61,19,4)),(0.35714285714285715,(81,7,8)),(0.35714285714285715,(71,7,8)),(0.35714285714285715,(11,7,14)),(0.35714285714285715,(1,7,6)),(0.3545454545454545,(21,11,14)),(0.35263157894736846,(11,19,16)),(0.3526315789473684,(71,19,4)),(0.3526315789473684,(41,19,4)),(0.3473684210526316,(81,19,4)),(0.3473684210526316,(51,19,4)),(0.34736842105263155,(1,19,14)),(0.34615384615384615,(21,13,14)),(0.34615384615384615,(21,13,4)),(0.3461538461538461,(11,13,8)),(0.34444444444444444,(11,9,16)),(0.34444444444444444,(1,9,20)),(0.3421052631578948,(31,19,4)),(0.33999999999999997,(31,5,8)),(0.3384615384615385,(11,13,16)),(0.33636363636363636,(1,11,14)),(0.3363636363636363,(1,11,18)),(0.3363636363636363,(1,11,8)),(0.33529411764705885,(1,17,14)),(0.33529411764705874,(11,17,8)),(0.3333333333333333,(71,3,8)),(0.3333333333333333,(41,15,4)),(0.3333333333333333,(41,3,18)),(0.3333333333333333,(11,9,14)),(0.3333333333333333,(11,3,14)),(0.33333333333333326,(61,15,4)),(0.33333333333333326,(1,9,18)),(0.33333333333333326,(1,9,8)),(0.32941176470588235,(61,17,4)),(0.32857142857142857,(1,7,18)),(0.32727272727272727,(21,11,4)),(0.32727272727272727,(11,11,16)),(0.3266666666666666,(81,15,4)),(0.3266666666666666,(71,15,4)),(0.3266666666666666,(1,15,4)),(0.3235294117647059,(81,17,4)),(0.3235294117647059,(71,17,4)),(0.3235294117647059,(41,17,4)),(0.32307692307692304,(61,13,4)),(0.32307692307692304,(1,13,18)),(0.3222222222222222,(1,9,6)),(0.32000000000000006,(11,15,16)),(0.32000000000000006,(11,15,14)),(0.32,(51,15,4)),(0.31999999999999995,(11,5,14)),(0.31999999999999995,(1,15,16)),(0.31999999999999995,(1,15,8)),(0.31999999999999995,(1,5,16)),(0.31764705882352945,(51,17,4)),(0.3176470588235294,(1,17,8)),(0.31578947368421056,(91,19,4)),(0.3157894736842105,(11,19,14)),(0.31428571428571433,(11,7,16)),(0.31333333333333335,(31,15,4)),(0.31333333333333335,(1,15,14)),(0.3133333333333333,(1,15,18)),(0.3117647058823529,(1,17,4)),(0.3111111111111111,(1,9,16)),(0.3090909090909091,(1,11,6)),(0.3076923076923077,(81,13,4)),(0.3076923076923077,(71,13,4)),(0.3076923076923077,(51,13,4)),(0.3076923076923077,(41,13,4)),(0.3076923076923077,(11,13,14)),(0.30769230769230765,(1,13,8)),(0.3058823529411765,(31,17,4)),(0.30526315789473685,(1,19,18)),(0.3052631578947368,(1,19,8)),(0.30000000000000004,(61,3,2)),(0.30000000000000004,(51,3,2)),(0.30000000000000004,(11,17,14)),(0.30000000000000004,(11,11,14)),(0.30000000000000004,(1,11,20)),(0.3,(91,1,8)),(0.3,(81,1,8)),(0.3,(71,1,8)),(0.3,(61,11,4)),(0.3,(11,5,16)),(0.3,(11,3,8)),(0.3,(1,19,16)),(0.3,(1,17,18)),(0.3,(1,7,14)),(0.3,(1,5,14)),(0.3,(1,5,4)),(0.3,(1,3,20)),(0.3,(1,3,16)),(0.3,(1,3,8)),(0.3,(1,1,18)),(0.2941176470588235,(1,17,16)),(0.2894736842105263,(1,19,6)),(0.28947368421052627,(1,19,4)),(0.2888888888888889,(1,9,14)),(0.2882352941176471,(91,17,4)),(0.28666666666666674,(1,15,20)),(0.2857142857142857,(61,7,4)),(0.2857142857142857,(1,7,20)),(0.2846153846153846,(31,13,4)),(0.2846153846153846,(1,13,4)),(0.28461538461538455,(1,13,16)),(0.2818181818181818,(81,11,4)),(0.2818181818181818,(71,11,4)),(0.2818181818181818,(51,11,4)),(0.2818181818181818,(1,11,16)),(0.28,(91,15,4)),(0.28,(21,5,16)),(0.2777777777777778,(61,9,4)),(0.27692307692307694,(1,13,20)),(0.27692307692307694,(1,13,6)),(0.27647058823529413,(1,17,20)),(0.2727272727272727,(1,11,4)),(0.27142857142857146,(81,7,4)),(0.27142857142857146,(71,7,4)),(0.2714285714285714,(1,7,16)),(0.2666666666666667,(81,9,4)),(0.2666666666666667,(71,9,4)),(0.26666666666666666,(81,3,2)),(0.26666666666666666,(71,3,2)),(0.26666666666666666,(61,3,8)),(0.26666666666666666,(51,3,8)),(0.26666666666666666,(1,3,18)),(0.26363636363636367,(41,11,4)),(0.2631578947368421,(1,19,20)),(0.26,(41,5,4)),(0.26,(21,5,4)),(0.26,(1,5,20)),(0.25882352941176473,(1,17,6)),(0.2571428571428572,(51,7,4)),(0.2571428571428572,(41,7,4)),(0.2571428571428572,(1,7,4)),(0.2555555555555556,(51,9,4)),(0.2555555555555556,(41,9,4)),(0.25384615384615383,(91,13,4)),(0.25333333333333335,(1,15,6)),(0.24545454545454548,(91,11,4)),(0.24285714285714288,(91,7,4)),(0.24000000000000005,(81,5,4)),(0.24000000000000005,(71,5,4)),(0.24000000000000005,(61,5,4)),(0.24000000000000005,(61,5,2)),(0.24000000000000005,(51,5,4)),(0.24000000000000005,(51,5,2)),(0.24000000000000005,(31,5,4)),(0.23636363636363641,(31,11,4)),(0.23333333333333334,(91,9,4)),(0.23333333333333334,(1,9,4)),(0.2333333333333333,(91,3,2)),(0.2333333333333333,(41,3,8)),(0.2333333333333333,(31,3,8)),(0.23157894736842108,(11,19,4)),(0.22857142857142862,(31,7,4)),(0.22222222222222227,(31,9,4)),(0.22000000000000003,(91,5,4)),(0.22000000000000003,(81,5,2)),(0.22000000000000003,(71,5,2)),(0.20000000000000007,(61,9,2)),(0.20000000000000007,(51,15,2)),(0.20000000000000007,(51,9,2)),(0.20000000000000004,(61,7,2)),(0.20000000000000004,(51,7,2)),(0.2,(91,5,2)),(0.2,(61,1,8)),(0.2,(61,1,2)),(0.2,(51,1,8)),(0.2,(51,1,2)),(0.2,(41,1,8)),(0.2,(41,1,2)),(0.2,(31,1,8)),(0.2,(31,1,2)),(0.2,(21,1,8)),(0.2,(21,1,2)),(0.2,(11,1,2)),(0.2,(1,1,16)),(0.2,(1,1,14)),(0.2,(1,1,2)),(0.19999999999999998,(11,3,16)),(0.19333333333333338,(61,15,2)),(0.18235294117647063,(51,17,2)),(0.1823529411764706,(11,17,4)),(0.18,(21,5,2)),(0.1777777777777778,(81,9,2)),(0.1777777777777778,(71,9,2)),(0.17777777777777778,(11,9,4)),(0.176923076923077,(51,13,2)),(0.17647058823529416,(61,17,2)),(0.17368421052631586,(51,19,2)),(0.17272727272727278,(61,11,2)),(0.17272727272727278,(51,11,2)),(0.17142857142857146,(81,7,2)),(0.17142857142857146,(71,7,2)),(0.17142857142857143,(21,7,2)),(0.16923076923076927,(61,13,2)),(0.16923076923076927,(21,13,2)),(0.168421052631579,(61,19,2)),(0.16666666666666669,(81,15,2)),(0.16666666666666669,(71,15,2)),(0.16666666666666669,(11,15,4)),(0.16666666666666666,(21,3,2)),(0.16363636363636366,(21,11,2)),(0.16363636363636364,(11,11,4)),(0.16,(11,5,4)),(0.15714285714285717,(91,7,2)),(0.15714285714285717,(11,7,4)),(0.15555555555555556,(91,9,2)),(0.15555555555555556,(21,9,2)),(0.15454545454545457,(81,11,2)),(0.15454545454545457,(71,11,2)),(0.15384615384615388,(81,13,2)),(0.15384615384615388,(71,13,2)),(0.15333333333333338,(21,15,2)),(0.15294117647058827,(81,17,2)),(0.15294117647058827,(71,17,2)),(0.15263157894736845,(21,19,2)),(0.14705882352941183,(21,17,2)),(0.14666666666666667,(91,15,2)),(0.14615384615384616,(11,13,4)),(0.14444444444444446,(41,9,2)),(0.14444444444444446,(31,9,2)),(0.14210526315789476,(81,19,2)),(0.14210526315789476,(71,19,2)),(0.13684210526315793,(11,19,2)),(0.13636363636363638,(91,11,2)),(0.13529411764705884,(91,17,2)),(0.13529411764705884,(11,17,2)),(0.13333333333333333,(41,3,2)),(0.13333333333333333,(31,3,2)),(0.13333333333333333,(11,3,4)),(0.13333333333333333,(1,3,2)),(0.13076923076923078,(91,13,2)),(0.13076923076923078,(41,13,2)),(0.13076923076923078,(31,13,2)),(0.1294117647058824,(41,17,2)),(0.1294117647058824,(31,17,2)),(0.1285714285714286,(41,7,2)),(0.1285714285714286,(31,7,2)),(0.1272727272727273,(41,11,2)),(0.1272727272727273,(31,11,2)),(0.12631578947368424,(91,19,2)),(0.12105263157894741,(41,19,2)),(0.12105263157894741,(31,19,2)),(0.12000000000000002,(41,15,2)),(0.12000000000000002,(31,15,2)),(0.1111111111111111,(1,9,2)),(0.10769230769230768,(11,13,2)),(0.10666666666666667,(11,15,2)),(0.1,(91,1,2)),(0.1,(81,1,2)),(0.1,(71,1,2)),(0.1,(41,5,2)),(0.1,(31,5,2)),(0.1,(11,7,2)),(0.1,(11,1,8)),(0.1,(1,19,2)),(0.1,(1,13,2)),(0.1,(1,11,2)),(0.1,(1,5,2)),(0.1,(1,1,8)),(9.999999999999999e-2,(41,3,4)),(9.999999999999999e-2,(31,3,4)),(9.999999999999999e-2,(1,7,2)),(9.333333333333334e-2,(1,15,2)),(9.090909090909091e-2,(11,11,2)),(8.823529411764708e-2,(1,17,2)),(8.0e-2,(11,5,2)),(7.777777777777778e-2,(11,9,2)),(6.666666666666667e-2,(21,3,4)),(6.666666666666667e-2,(11,3,2)),(3.333333333333333e-2,(91,3,4)),(3.333333333333333e-2,(81,3,4)),(3.333333333333333e-2,(71,3,4)),(3.333333333333333e-2,(61,3,4)),(3.333333333333333e-2,(51,3,4)),(0.0,(91,1,4)),(0.0,(81,1,4)),(0.0,(71,1,4)),(0.0,(61,1,4)),(0.0,(51,1,4)),(0.0,(41,1,4)),(0.0,(31,1,4)),(0.0,(21,1,4)),(0.0,(11,1,16)),(0.0,(11,1,4)),(0.0,(1,1,4))]
{-
edb <- readEmbeddings
let f = embeddings2Forest edb
recallWith inner f 10 $ (\(_,_,embd) -> ((fromListDv embd)::DVector Double)) $ head edb

findNearest f 10 $ head edb

-}
